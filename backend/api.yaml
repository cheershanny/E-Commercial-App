openapi: 3.0.1
info:
  title: E Commerce App
  version: 1.0.0
  description: >-
    A simple e-commerce web application built with Node.js, Express, and
    PostgreSQL.
    
paths:
  /users/register:
    summary: create new user
    post:
      summary: create new user
      operationId: create_new_user
      requestBody:
        description: A new user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '200':
          $ref: '#/components/responses/success'
        '400':
          $ref: '#/components/responses/invalid_argument'
        '409':
          $ref: '#/components/responses/already_exists'
      tags:
        - users
  /login:
    summary: user login
    post:
      summary: authenticate username and password
      operationId: login_user
      requestBody:
        description: username and password
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/success'
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                error:
                  value:
                    message: Unauthorized
        '404':
          $ref: '#/components/responses/not_found'
      tags:
        - users
  /profile:
    summary: profile of an user
    get:
      summary: get profile of an user (after login)
      description: get user_id, name and email of an user
      operationId: get_users
      responses:
        '200':
          $ref: '#/components/responses/success'
        '400':
          $ref: '#/components/responses/invalid_argument'
        '404':
          $ref: '#/components/responses/not_found'
      tags:
        - users
  /profile/orders:
    summary: All orders of an user
    get:
      summary: get all orders of an user (after login)
      description: get all orders information of an user
      operationId: get_user_orders
      responses:
        '200':
          $ref: '#/components/responses/success'
        '400':
          $ref: '#/components/responses/invalid_argument'
        '404':
          $ref: '#/components/responses/not_found'
      tags:
        - users
  /logout:
    summary: logout
    post:
      summary: logout user
      operationId: logout
      responses:
        '200':
          $ref: '#/components/responses/success'
      tags:
        - users
 
  /products:
    summary: all products
    get:
      summary: Get all products
      description: ''
      operationId: get_products
      responses:
        '200':
          content:
            text/plain; charset=utf-8:
              examples:
                Success:
                  value: >-
                    [{"product_id":1,"product_name":"Product
                    A","description":"tastes like
                    soap","price":"0.99","quantity_available":100},{"product_id":2,"product_name":"Product
                    B","description":"Description of Product
                    B","price":"29.99","quantity_available":50}]
          description: Success
      tags:
        - products
    post:
      summary: create new products
      operationId: create_product
      requestBody:
        description: A new product object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'
      responses:
        '201':
          $ref: '#/components/responses/success'
        '400':
          $ref: '#/components/responses/invalid_argument'
        '409':
          $ref: '#/components/responses/already_exists'
      tags:
        - products
  /products/{product_id}:
    summary: Manage product based on Id
    get:
      summary: get product by product_id
      operationId: get_product
      parameters:
        - $ref: '#/components/parameters/product_id'
      responses:
        '200':
          $ref: '#/components/responses/success'
        '400':
          $ref: '#/components/responses/invalid_argument'
        '404':
          $ref: '#/components/responses/not_found'
      tags:
        - products
    put:
      summary: update product by product_id
      operationId: update_product
      parameters:
        - $ref: '#/components/parameters/product_id'
      requestBody:
        description: An update product object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'
      responses:
        '200':
          $ref: '#/components/responses/success'
        '400':
          $ref: '#/components/responses/invalid_argument'
        '404':
          $ref: '#/components/responses/not_found'
      tags:
        - products
    delete:
      summary: delete product by product_id
      operationId: delete_product
      parameters:
        - $ref: '#/components/parameters/product_id'
      responses:
        '200':
          $ref: '#/components/responses/success'
        '400':
          $ref: '#/components/responses/invalid_argument'
        '404':
          $ref: '#/components/responses/not_found'
      tags:
        - products

components:
  schemas:
    user:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      xml:
        name: user
    product:
      type: object
      properties:
        product_name:
          type: string
        description:
          type: string
        price:
          type: number
        quantity_available:
          type: integer
  responses:
    success:
      description: Success
      content:
        text/plain; charset=utf-8:
          examples:
            Message:
              value: Success
    invalid_argument:
      description: Invalid Argument Provided
      content:
        text/plain; charset=utf-8:
          examples:
            Message:
              value: Invalid Argument
    not_found:
      description: Values not found
      content:
        text/plain; charset=utf-8:
          examples:
            Message:
              value: Not Found
    already_exists:
      description: Value already exists
      content:
        text/plain; charset=utf-8:
          examples:
            Message:
              value: Already exists
  parameters:
    user_id:
      name: user_id
      in: path
      description: The id of the user
      required: true
      schema:
        type: string
    username:
      name: username
      in: query
      description: The username
      required: true
      schema:
        type: string
    product_id:
      name: product_id
      in: path
      description: The id of the product
      required: true
      schema:
        type: string

